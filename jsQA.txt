1. Question: What is the difference between an array and a set in JavaScript?
Answer:

Array:

Ordered: Arrays maintain the order of elements.
Duplicates: Arrays can contain duplicate values.
Index-based Access: Elements are accessed via their index.
Use Case: Suitable for scenarios where order matters, and duplicate elements are acceptable.
Set:

Unordered: Sets do not guarantee the order of elements.
Unique Values: Sets automatically handle duplicates; only unique values are stored.
Key-based Access: Elements are accessed by their value, not by an index.
Use Case: Suitable for scenarios where you need to ensure unique values and do not care about order.
2. Question: How can you remove duplicates from an array using a Set?
Answer:

You can remove duplicates from an array by converting it into a Set and then converting it back into an array:

javascript
Copy code
const array = [1, 2, 2, 3, 4, 4, 5];
const uniqueArray = [...new Set(array)];
console.log(uniqueArray); // Output: [1, 2, 3, 4, 5]
3. Question: How do you check if a value exists in a Set?
Answer:

You can use the has method to check if a value exists in a Set:

javascript
Copy code
const set = new Set([1, 2, 3, 4]);
console.log(set.has(2)); // Output: true
console.log(set.has(5)); // Output: false
4. Question: How can you iterate over the elements of a Map?
Answer:

You can iterate over the elements of a Map using forEach, for...of, or entries method:

javascript
Copy code
const map = new Map([
    ['a', 1],
    ['b', 2],
    ['c', 3]
]);

// Using forEach
map.forEach((value, key) => {
    console.log(`${key}: ${value}`);
});

// Using for...of
for (let [key, value] of map) {
    console.log(`${key}: ${value}`);
}

// Using entries()
for (let [key, value] of map.entries()) {
    console.log(`${key}: ${value}`);
}
5. Question: How do you add a key-value pair to a Map?
Answer:

You can use the set method to add a key-value pair to a Map:

javascript
Copy code
const map = new Map();
map.set('name', 'Alice');
map.set('age', 30);
console.log(map); // Output: Map { 'name' => 'Alice', 'age' => 30 }
6. Question: How do you remove a key-value pair from a Map?
Answer:

You can use the delete method to remove a key-value pair from a Map:

javascript
Copy code
const map = new Map([
    ['name', 'Alice'],
    ['age', 30]
]);

map.delete('age');
console.log(map); // Output: Map { 'name' => 'Alice' }
7. Question: How do you find the size of a Set or Map?
Answer:

You can use the size property to get the number of elements in a Set or Map:

javascript
Copy code
const set = new Set([1, 2, 3]);
console.log(set.size); // Output: 3

const map = new Map([
    ['name', 'Alice'],
    ['age', 30]
]);
console.log(map.size); // Output: 2
8. Question: What methods are available to iterate over an array?
Answer:

Common methods for iterating over arrays include:

forEach(callback): Executes a provided function once for each array element.

javascript
Copy code
const array = [1, 2, 3];
array.forEach(element => console.log(element));
map(callback): Creates a new array with the results of calling a provided function on every element.

javascript
Copy code
const array = [1, 2, 3];
const doubled = array.map(element => element * 2);
console.log(doubled); // Output: [2, 4, 6]
filter(callback): Creates a new array with all elements that pass the test implemented by the provided function.

javascript
Copy code
const array = [1, 2, 3, 4];
const evenNumbers = array.filter(element => element % 2 === 0);
console.log(evenNumbers); // Output: [2, 4]
reduce(callback, initialValue): Applies a function against an accumulator and each element to reduce it to a single value.

javascript
Copy code
const array = [1, 2, 3, 4];
const sum = array.reduce((accumulator, current) => accumulator + current, 0);
console.log(sum); // Output: 10
9. Question: What is the performance difference between using an array and a Set for checking membership?
Answer:

Array:

Checking if an element exists in an array (using indexOf or includes) is an O(n) operation because it may require scanning the entire array.
Set:

Checking if an element exists in a Set (using has) is an O(1) operation on average because Sets are implemented using hash tables.
10. Question: Can you use objects as keys in a Map?
Answer:

Yes, you can use objects as keys in a Map. Unlike regular objects, which convert keys to strings, Maps can use any value (including objects) as a key:

javascript
Copy code
const map = new Map();
const keyObj = { id: 1 };
map.set(keyObj, 'value associated with the object');
console.log(map.get(keyObj)); // Output: 'value associated with the object'
These questions cover a broad range of topics related to JavaScript collections and should help you prepare for interviews.






1. Question: What is the difference between a class and an object in JavaScript?
Answer:

Class:

A class is a blueprint or template for creating objects. It defines the structure and behavior (methods) that the objects created from the class will have.
Example:
javascript
Copy code
class Car {
    constructor(make, model) {
        this.make = make;
        this.model = model;
    }

    start() {
        console.log('Car started');
    }
}
Object:

An object is an instance of a class. It is created using the class blueprint and contains actual values for properties and methods defined by the class.
Example:
javascript
Copy code
const myCar = new Car('Toyota', 'Corolla');
myCar.start(); // Output: 'Car started'
2. Question: How do you achieve inheritance in JavaScript?
Answer:

Using Classes:
Inheritance can be achieved using the extends keyword to create a subclass that inherits properties and methods from a superclass.
Example:
javascript
Copy code
class Vehicle {
    constructor(make) {
        this.make = make;
    }

    start() {
        console.log('Vehicle started');
    }
}

class Car extends Vehicle {
    constructor(make, model) {
        super(make);
        this.model = model;
    }

    drive() {
        console.log('Car is driving');
    }
}

const myCar = new Car('Toyota', 'Corolla');
myCar.start(); // Output: 'Vehicle started'
myCar.drive(); // Output: 'Car is driving'
3. Question: What is polymorphism in JavaScript, and how is it implemented?
Answer:

Polymorphism allows methods to do different things based on the object that is calling them. In JavaScript, polymorphism can be implemented through method overriding and function overloading.

Method Overriding:

Subclasses can override methods defined in their parent class.
Example:
javascript
Copy code
class Animal {
    speak() {
        console.log('Animal speaks');
    }
}

class Dog extends Animal {
    speak() {
        console.log('Dog barks');
    }
}

const myDog = new Dog();
myDog.speak(); // Output: 'Dog barks'
4. Question: What are the benefits of using encapsulation in JavaScript?
Answer:

Encapsulation hides the internal state and implementation details of an object and only exposes a controlled interface to the outside world. This helps to:
Protect data: Prevent direct modification of object properties from outside the class.

Maintain control: Ensure that changes to the internal implementation do not affect external code.

Reduce complexity: Hide complex logic inside methods.

Example:

javascript
Copy code
class BankAccount {
    #balance; // Private field

    constructor(initialBalance) {
        this.#balance = initialBalance;
    }

    deposit(amount) {
        if (amount > 0) {
            this.#balance += amount;
        }
    }

    getBalance() {
        return this.#balance;
    }
}

const account = new BankAccount(100);
account.deposit(50);
console.log(account.getBalance()); // Output: 150
5. Question: How does JavaScript handle method binding and this context?
Answer:

this Context:
The value of this depends on how a function is called. In a method, this refers to the object that owns the method.

Binding Methods:

Automatic Binding: In a method of an object, this refers to the object.

Manual Binding: Use bind(), call(), or apply() to explicitly set this.

Example:

javascript
Copy code
class Person {
    constructor(name) {
        this.name = name;
    }

    greet() {
        console.log(`Hello, my name is ${this.name}`);
    }
}

const person = new Person('Alice');
const greetFunc = person.greet;
greetFunc(); // Output: 'Hello, my name is undefined' (loses context)

const boundGreet = person.greet.bind(person);
boundGreet(); // Output: 'Hello, my name is Alice' (correct context)
6. Question: Can you explain how to use super in JavaScript classes?
Answer:

The super keyword is used to call methods and access properties on a parent class from within a subclass. It allows the subclass to extend and modify the behavior of the parent class.

Example:

javascript
Copy code
class Animal {
    constructor(name) {
        this.name = name;
    }

    makeSound() {
        console.log('Generic animal sound');
    }
}

class Dog extends Animal {
    constructor(name, breed) {
        super(name); // Call the parent class constructor
        this.breed = breed;
    }

    makeSound() {
        super.makeSound(); // Call the parent class method
        console.log('Bark');
    }
}

const myDog = new Dog('Buddy', 'Golden Retriever');
myDog.makeSound();
// Output:
// Generic animal sound
// Bark
7. Question: How do you implement private properties and methods in JavaScript?
Answer:

Private Properties and Methods:
JavaScript provides private fields and methods using # syntax (introduced in ES2020). These are accessible only within the class that defines them.

Example:

javascript
Copy code
class Counter {
    #count = 0; // Private property

    increment() {
        this.#count++;
    }

    getCount() {
        return this.#count;
    }
}

const counter = new Counter();
counter.increment();
console.log(counter.getCount()); // Output: 1
console.log(counter.#count); // SyntaxError: Private field '#count' must be declared in an enclosing class
8. Question: What is the difference between Object.create() and class instantiation with new?
Answer:

Object.create():

Creates a new object with the specified prototype object and properties.
Example:
javascript
Copy code
const proto = {
    greet() {
        console.log('Hello!');
    }
};

const obj = Object.create(proto);
obj.greet(); // Output: 'Hello!'
Class Instantiation (new):

Creates an instance of a class and initializes it with a constructor.
Example:
javascript
Copy code
class Greeter {
    greet() {
        console.log('Hello!');
    }
}

const instance = new Greeter();
instance.greet(); // Output: 'Hello!'
9. Question: How do you handle method overloading in JavaScript?
Answer:

JavaScript does not support method overloading in the traditional sense, but you can achieve similar behavior by using optional parameters or checking types within the method.

Example:
javascript
Copy code
class Printer {
    print(message, times = 1) {
        if (typeof message === 'string' && typeof times === 'number') {
            for (let i = 0; i < times; i++) {
                console.log(message);
            }
        } else {
            console.log('Invalid parameters');
        }
    }
}

const printer = new Printer();
printer.print('Hello'); // Output: 'Hello' (once)
printer.print('Hello', 3); // Output: 'Hello' (three times)
10. Question: How do you use getter and setter methods in JavaScript classes?
Answer:

Getters and Setters allow you to define how properties are accessed and modified. They are defined using get and set keywords.

Example:

javascript
Copy code
class Person {
    constructor(name) {
        this._name = name;
    }

    get name() {
        return this._name;
    }

    set name(value) {
        if (value) {
            this._name = value;
        } else {
            console.log('Invalid name');
        }
    }
}

const person = new Person('Alice');
console.log(person.name); // Output: Alice

person.name = 'Bob';
console.log(person.name); // Output: Bob

person.name = ''; // Output: Invalid name
These questions and answers cover a broad range of topics related to JavaScript's OOP concepts and should help you prepare for interviews focused on object-oriented programming.




Certainly! Here are some real-time interview questions and answers on core JavaScript concepts:

1. Question: What is the difference between == and === in JavaScript?
Answer:

== (Equality Operator):

Compares values for equality after performing type coercion (i.e., it converts the operands to the same type before making the comparison).
Example:
javascript
Copy code
console.log(5 == '5'); // Output: true
=== (Strict Equality Operator):

Compares values for equality without performing type coercion (i.e., it checks both value and type).
Example:
javascript
Copy code
console.log(5 === '5'); // Output: false
2. Question: What is a closure in JavaScript, and how is it used?
Answer:

Closure:
A closure is a function that retains access to its lexical scope, even when the function is executed outside that scope.

Closures are used to create private variables and methods, maintain state, and implement modules.

Example:

javascript
Copy code
function createCounter() {
    let count = 0;
    return function() {
        count++;
        return count;
    };
}

const counter = createCounter();
console.log(counter()); // Output: 1
console.log(counter()); // Output: 2
3. Question: What is the purpose of this in JavaScript?
Answer:

this:
Refers to the context in which a function is executed. Its value depends on how a function is called:

In a method, this refers to the object that owns the method.
In a constructor, this refers to the instance being created.
In a function, this can be global or undefined in strict mode.
In event handlers, this refers to the element that triggered the event.
Example:

javascript
Copy code
const obj = {
    name: 'Alice',
    greet() {
        console.log(`Hello, ${this.name}`);
    }
};

obj.greet(); // Output: Hello, Alice
4. Question: How do you handle asynchronous code in JavaScript?
Answer:

Callback Functions:

Functions passed as arguments to be executed later, often used in asynchronous operations.
Example:
javascript
Copy code
function fetchData(callback) {
    setTimeout(() => {
        callback('Data received');
    }, 1000);
}

fetchData(data => console.log(data)); // Output after 1 second: Data received
Promises:

Objects representing the eventual completion or failure of an asynchronous operation.
Example:
javascript
Copy code
function fetchData() {
    return new Promise((resolve, reject) => {
        setTimeout(() => {
            resolve('Data received');
        }, 1000);
    });
}

fetchData().then(data => console.log(data)); // Output after 1 second: Data received
Async/Await:

Syntax for working with Promises in a more synchronous-looking way.
Example:
javascript
Copy code
async function fetchData() {
    return new Promise((resolve, reject) => {
        setTimeout(() => {
            resolve('Data received');
        }, 1000);
    });
}

(async function() {
    const data = await fetchData();
    console.log(data); // Output after 1 second: Data received
})();
5. Question: Explain event delegation in JavaScript.
Answer:

Event Delegation:
A technique where a single event listener is attached to a parent element instead of multiple listeners on child elements. The parent element listens for events that bubble up from child elements.

Benefits include improved performance and reduced memory usage.

Example:

javascript
Copy code
document.querySelector('#parent').addEventListener('click', function(event) {
    if (event.target && event.target.matches('button')) {
        console.log('Button clicked:', event.target.textContent);
    }
});
6. Question: What are JavaScript prototypes, and how do they work?
Answer:

Prototypes:
Every JavaScript object has a prototype, which is another object from which it inherits properties and methods. This is part of the prototype chain, enabling object inheritance.

When you access a property or method of an object, JavaScript first looks at the object itself, and if not found, it looks up the prototype chain.

Example:

javascript
Copy code
function Person(name) {
    this.name = name;
}

Person.prototype.sayHello = function() {
    console.log(`Hello, my name is ${this.name}`);
};

const person = new Person('Alice');
person.sayHello(); // Output: Hello, my name is Alice
7. Question: What is the difference between var, let, and const?
Answer:

var:

Function-scoped or globally-scoped.

Can be redeclared and updated.

Hoisted to the top of its scope, meaning it can be used before its declaration.

Example:

javascript
Copy code
var x = 10;
var x = 20; // No error
let:

Block-scoped.

Can be updated but not redeclared within the same block.

Not hoisted in a way that allows use before declaration.

Example:

javascript
Copy code
let y = 10;
y = 20; // Allowed
const:

Block-scoped.

Cannot be updated or redeclared within the same block.

Used for constants and is hoisted, but must be initialized.

Example:

javascript
Copy code
const z = 10;
z = 20; // TypeError: Assignment to constant variable.
8. Question: What is a JavaScript Promise, and how does it work?
Answer:

Promise:
An object representing the eventual completion or failure of an asynchronous operation. It allows chaining of asynchronous operations.

States:

Pending: Initial state.
Fulfilled: The operation completed successfully.
Rejected: The operation failed.
Example:

javascript
Copy code
const promise = new Promise((resolve, reject) => {
    setTimeout(() => {
        resolve('Success!');
    }, 1000);
});

promise.then(result => console.log(result)) // Output after 1 second: Success!
       .catch(error => console.log(error));
9. Question: Explain the concept of "hoisting" in JavaScript.
Answer:

Hoisting:
JavaScript's default behavior of moving declarations (but not initializations) to the top of their containing scope during compilation.

Applies to variables (with var) and function declarations.

Example:

javascript
Copy code
console.log(a); // Output: undefined
var a = 5;

function greet() {
    console.log('Hello');
}
greet(); // Output: 'Hello'
10. Question: What are JavaScript's data types, and how do you check them?
Answer:

Primitive Data Types:

undefined, null, boolean, number, string, symbol (ES6), bigint (ES11).
Reference Data Types:

Objects, Arrays, Functions, etc.

Checking Data Types:

Use typeof for primitives and instanceof for objects.
Example:
javascript
Copy code
console.log(typeof 'Hello'); // Output: string
console.log(typeof 42);      // Output: number
console.log(typeof true);    // Output: boolean
console.log(typeof {});      // Output: object
console.log([] instanceof Array); // Output: true
These questions and answers cover a range of core JavaScript concepts and should help you prepare for interviews on foundational JavaScript topics.


