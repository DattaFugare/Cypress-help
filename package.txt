  "scripts": {
    "cy:open": "cypress open",
    "cy:tests": "cypress run --spec cypress/e2e/tests-reqres/*.cy.js",

    "tests:Tag:SANITY": "cypress run --spec cypress/e2e/tests-reqres/*.cy.js --env grep=@sanity",
    "tests:Tag:REGRESSION": "cypress run --spec cypress/e2e/tests-reqres/*.cy.js --env grep=@regression",

    "tests:DEV": "BASE_URL=https://www.dev-reqres.in/api/ cypress run --spec cypress/e2e/tests-reqres/*.cy.js",
    "tests:PRE-PROD": "BASE_URL=https://www.pre-prod-reqres.in/api/ cypress run --spec cypress/e2e/tests-reqres/*.cy.js",
    "tests:PROD": "BASE_URL=https://reqres.in/api/ cypress run --spec cypress/e2e/tests-reqres/*.cy.js"

  },

////////////////////////////////////////////////////////////////
 "cy:open": "cypress open",
    "cy:tests:ELECTRON:NORMAL": "cypress run --spec cypress/e2e/Sauce_Demo/*.cy.js --headed",
    "cy:tests:ELECTRON: ": "cypress run --spec cypress/e2e/Sauce_Demo/*.cy.js",

    "cy:tests:ELECTRON": "cypress run --spec cypress/e2e/Sauce_Demo/*.cy.js --headed",
    "cy:tests:CHROME": "cypress run --spec cypress/e2e/Sauce_Demo/*.cy.js --headed --browser chrome",
    "cy:tests:FIREFOX": "cypress run --spec cypress/e2e/Sauce_Demo/*.cy.js --headed --browser firefox",
    "cy:tests:EDGE": "cypress run --spec cypress/e2e/Sauce_Demo/*.cy.js --headed --browser edge",

    "cy:tests:ELECTRON:Tag:SANITY": "cypress run --spec cypress/e2e/Sauce_Demo/*.cy.js --headed --env grep=@sanity",
    "cy:tests:ELECTRON:Tag:REGRESSION": "cypress run --spec cypress/e2e/Sauce_Demo/*.cy.js --headed --env grep=@regression"


////////////////////////////////////////////////////////////////////////////////////////////////
const { defineConfig } = require('cypress');
const fs = require('fs');

function loadEnvironmentConfig(config) {
  const environment = config.env.environment || 'local'; // Default to 'local' if not set
  const configFilePath = `cypress/settings/${environment}.json`;

  if (fs.existsSync(configFilePath)) {
    return JSON.parse(fs.readFileSync(configFilePath));
  } else {
    throw new Error(`Configuration file not found: ${configFilePath}`);
  }
}

module.exports = defineConfig({
  e2e: {
    setupNodeEvents(on, config) {
      const environmentConfig = loadEnvironmentConfig(config);

      return {
        ...config,
        ...environmentConfig,
        env: {
          ...config.env,
          ...environmentConfig.env,
        },
      };
    },
    baseUrl: 'http://localhost:8080', // Fallback if baseUrl not in env-specific config
  },
});
